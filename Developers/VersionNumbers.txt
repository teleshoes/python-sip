=================
 Version Numbers
=================

There are three version numbers related to SIP.  These are the 3-part (major,
minor, maintenance) version number of SIP itself (i.e. the bindings
generator and build system), the 3-part version number of the sip module and
the 2-part (major, minor) version number of the ABI.

All version numbers are public and are used to provide dependency information
for PyPI, pip etc.

The ABI is called by SIP, is defined by the sip.h header file and is
implemented by the sip module.  Given that these different components can be
installed and used by different projects that extend a root package, it is
possible for each to refer to different ABI versions.  It is therefore
necessary to take a rigorous approach to when and how version numbers are
changed so that incompatibilities can be detected.  It is just as important
to ensure that forced upgrades are kept to a minimum.


Changing the ABI Version
========================

The major number is incremented (and the minor number reset to 0) when the ABI
is changed in an incompatible way.  Examples are when functions are removed,
when structure members are removed or when structure members are re-ordered.
The minor number of the SIP version must also be incremented (and its
maintenance number reset to 0).

The minor number is incremented when additional functionality is added to the
ABI so that backwards compatibility is not affected.


Changing the sip Module Version
===============================

The major number always matches the major number of the ABI version that the
module implements and is changed under the same circumstances (and the
maintenance number is reset to 0).

The minor number always matches the minor number of the ABI version that the
module implements and is changed under the same circumstances (and the
maintenance number is reset to 0).

The maintenance number is incremented whenever the implementation of the sip
module changes without any change to the ABI.


Changing the SIP Version
========================

The major version number is always 5.

The minor version is incremented (and the maintenance number reset to 0) when
any change that affects compatibility is made.  Examples include a change to
the ABI's major version number, the removal of support for a Python version,
the removal of a deprecated directive or an incompatible change to the build
system API.

The maintenance version is incremented whenever a compatible change is made.
Examples include any additional functionality or support for a new Python
version.


Version Number Checks
=====================

SIP will generate code that will verify (after including sip.h) that the major
ABI version number it is generating code for matches the major ABI version
number defined in sip.h.

The bindings generator will produce code that is independent of the current
minor ABI version number (using pre-processor conditionals if necessary).  In
other words it cannot assume that the sip.h file being used defines the current
version of the ABI.

An extension module will verify that the major ABI version number it is built
against (i.e. that defined by the sip.h file used) matches the major ABI
version number implemented by the sip module.  It will also verify that the
minor ABI version number is less than or equal to that implemented by the sip
module.


Dependency Checks
=================

Projects that use SIP will want to specify two different dependencies (that
will eventually end up in sdist or wheel metadata).

The sources for an extension module will be dependent on a specific minor
version number of SIP (because a different minor version number implies some
sort of incompatibility), for example ``>=5.0,<5.1``.  If the sources make use
of a new feature introduced in a specific maintenance version then it will be
dependent on that maintenance version, for example ``>=5.0.2,<5.1``.

The binaries of an extension module will be dependent on a specific minor
version number of the sip module (because a different minor version number
implies a minimum level of required functionality), for example ``>=12.6,<13``.
If the sources rely on a particular implementation of the sip module, typically
for a bug fix, then it will be dependent on the maintenance version, for
example ``>=12.6.2,<13``.
